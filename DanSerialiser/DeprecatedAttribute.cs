using System;

namespace DanSerialiser
{
	/// <summary>
	/// This attribute should be used in scenarios where a property on a type is being replaced but it is desirable that when the new type is serialised, that data may be deserialised
	/// into the old version of the type. For example, if V1 of a class has a string property 'Name' that is to be replaced on the V2 class with a property called 'TranslatedName' that
	/// is of type TranslatedString then a computed 'Name' property may be maintained on the V2 type which returns the default language content of the TranslatedString value - this
	/// would mean that any code that was compiled against the V1 type would continue to work when compiled against the V2 type. However, if code compiled against the V1 type tries to
	/// deserialise an instance of this type where the serialisation occurred where the V2 type was loaded then it would fail as the assembly referencing the V1 type is not aware of
	/// the new 'TranslatedName' property and the computed 'Name' property would not contribute to the serialised data.. unless this attribute is added to the computed property. When
	/// this attribute is added to a property, its value will be included in the serialised data and so deserialisation to V1 of the type will succeed.
	/// 
	/// If types are only ever changed by way of adding new properties or replacing properties but adding computed properties that have this attribute on them then older clients will
	/// always be able to deserialise messages generated by newer versions of assemblies.
	/// </summary>
	[AttributeUsage(AttributeTargets.Property)]

	public sealed class DeprecatedAttribute : Attribute { }
}