using System;

namespace DanSerialiser
{
	/// <summary>
	/// During the serialisation process, it may be desirable to transform some values before serialising them - for example, large linked lists could result in
	/// a stack overflow exception as the serialiser steps through each item in the chain and so it may be better if it were replaced with a flat list type. When
	/// using the 'FastestTreeBinarySerialisation' methods, this specialised form of type converter is required. In order for the resulting data to be deserialised,
	/// an IDeserialisationTypeConverter will be required that can translate the flat list back into the linked list type.
	/// </summary>
	public interface IFastSerialisationTypeConverter : ISerialisationTypeConverter
	{
		/// <summary>
		/// This will return a non-null reference if the type converter wants to change how the specified sourceType should be serialised and will return null if
		/// the type converter does not wish to introduce a behaviour change. An example usage might be a type converter that changes how a linked list is to be
		/// serialised, such that it is written as a flat list of items rather than a chain of nodes that link one to the next and which will result in a call
		/// stack during serialisation that is at least as deep as the number of items in the linked list (which could result in a stack overflow exception if
		/// the linked list has enough items) - a LINQ Expression would be generated by the type converter to serialise the flat list (the type converter needs
		/// only limited knowledge about how to serialise each item within the list because it can request MemberSetterDetails for any type that must be written).
		/// </summary>
		FastSerialisationTypeConversionResult GetDirectWriterIfPossible(Type sourceType, MemberSetterDetailsRetriever memberSetterDetailsRetriever);
	}
}